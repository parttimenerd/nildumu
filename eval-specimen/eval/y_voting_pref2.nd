/* adopted from the ApproxFlow repo, which in turn is based on */
/* F. Biondi, A. Legay, and J. Quilbeuf, "Comparative analysis of leakage tools on scalable case studies,"*/


int N = 5;

/* C is the number of candidates */
int C = 5;


/* factorial function */
int fact(int n){
  int ret = 1;
  if (n <= 1) { 
    ret = 1;
  } else {
    ret = n*fact(n - 1);
  }
  return ret;
}
  
/* the result is the number of votes of each candidate */
int[5 /* C */] result; /* these are our public (observable) outputs */
int i = 0;
while (i < C) {
	result[i] = 0;
	i = i + 1;
}


  /* init private values in the intervals defined in QUAIL file */

  /* The secret is the preference of each voter */
  h input int[5 /* N */] secrets = 0bu{32}; 
  int[5 /* N */] vote; /* these are our secrets */
  int CFACT= fact(C);
  i = 0;
  while (i < N) {
    vote[i]=secrets[i]%CFACT;
    i = i + 1;
  }

  int voter = 0;
  int vote_val = 0;
  int[5 /* N */] decl; /* temporary table used by the QUAIL version */
  /* voting */
  while (voter<N) {
    while (vote_val<CFACT) {
if (vote[voter]==vote_val) {
  decl[voter]=vote_val;
}  
vote_val=vote_val+1;
    }
    vote_val=0;
    voter=voter+1;
  }

  /* transform the secret of each voter into the order of the preferences */
  voter=0;
  while (voter<N) { 

    /* build the initial array */
    int candidate=0;
    int[5 /* C */] temparray;  /* temporary table used by the QUAIL version */
    while (candidate<C){
temparray[candidate]=candidate;
candidate=candidate+1;
    }

    int k=C;
    /* find a position */
    while (k>0) {
int pos = decl[voter]%k;
candidate=C-k;
/* update the vote of the candidate */
result[candidate]=(result[candidate])+(temparray[pos]);

/* remove the element from the array */
int y=pos;
while (y<C - 1) {
  temparray[y]=temparray[y+1];
  y=y+1;
}

/* update the vote of the voter */
decl[voter]=decl[voter]/k;

/* decrease the counter */
k=k - 1;
    }
    voter=voter+1;
  }

l output var out = result;
